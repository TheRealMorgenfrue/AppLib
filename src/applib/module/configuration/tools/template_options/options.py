from typing import Any, Callable

from .template_enums import UIFlags, UIGroups, UITypes


class Undefined:
    pass


class Option:
    def __init__(
        self,
        default,
        actions: Callable | list[Callable] = Undefined,
        max: int = Undefined,
        min: int = Undefined,
        type: type = Undefined,
        validators: Callable | list[Callable] = Undefined,
    ):
        """Create an option instance usable in a non-GUI environment.

        An Option is the value of a setting, as defined in the template specification.

        Parameters
        ----------
        default : Any
            The default value for this setting.
        actions : Callable | list[Callable], optional
            Functions to call when this setting changes value.
            Each function must take one argument, which is the new value of this setting.
            ##### Applicable settings: All
        max : int, optional
            The maximum value for this setting.
            If max is Undefined, there is no limit (though upper limit is 999999 in the GUI).
            ##### Applicable settings: Any number ranges (e.g. slider or spinbox)
            NOTE: Sliders do not support floats currently.
        min : int, optional
            The minimum value for this setting.
            ##### Applicable settings: Any number ranges (e.g. slider or spinbox)
            NOTE: Sliders do not support floats currently.
        type : type, optional
            The Python type for the value of this setting. For instance, 3 has type 'int'.
            ##### Applicable settings: All
            NOTE: Types are also inferred from other arguments.
        validators : Callable | list[Callable], optional
            Functions used to validate the value of this setting (in addition to default Pydantic validation).
            Each function must take one argument, which is the value of this setting.
            If the value is invalid, they must raise either ValueError or AssertionError.
            ##### Applicable settings: All
        """
        self.default = default
        self.actions = actions
        self.max = max
        self.min = min
        self.type = type
        self.validators = validators

    def is_defined(self, attr) -> bool:
        return type(attr) != Undefined


class GUIOption(Option):
    def __init__(
        self,
        default,
        actions: Callable | list[Callable] = Undefined,
        max: int = Undefined,
        min: int = Undefined,
        type: type = Undefined,
        ui_disable_button: bool = Undefined,
        ui_disable_other: Any = Undefined,
        ui_disable_self: Any = Undefined,
        ui_desc: str = Undefined,
        ui_file_filter: str = Undefined,
        ui_flags: UIFlags | list[UIFlags] = Undefined,
        ui_group: Any | list[Any] = Undefined,
        ui_group_parent: UIGroups | list[UIGroups] = Undefined,
        ui_invalid_msg: tuple[str, str] = Undefined,
        ui_title: str = Undefined,
        ui_type: UITypes = Undefined,
        ui_unit: str = Undefined,
        validators: Callable | list[Callable] = Undefined,
        values: list | dict = Undefined,
    ):
        """Create an option instance usable in a GUI environment.

        An Option is the value of a setting, as defined in the template specification.

        Parameters
        ----------
        default : Any
            The default value for this setting.
            ##### Applicable settings: All
        actions : Callable | list[Callable], optional
            Functions to call when this setting changes value.
            Each function must take one argument, which is the new value of this setting.
            ##### Applicable settings: All
        max : int, optional
            The maximum value for this setting.
            If max is Undefined, there is no limit (though upper limit is 999999 in the GUI).
            ##### Applicable settings: Any number ranges (e.g. slider or spinbox)
            NOTE: Sliders do not support floats currently.
        min : int, optional
            The minimum value for this setting.
            ##### Applicable settings: Any number ranges (e.g. slider or spinbox)
            NOTE: Sliders do not support floats currently.
        type : type, optional
            The Python type for the value of this setting. For instance, 3 has type 'int'.
            ##### Applicable settings: All
            NOTE: Types are also inferred from other arguments.
        ui_disable_button : bool, optional
            Enable or disable the disable button for this setting.
            ##### Applicable settings: All
            NOTE: A disable button is generated by default if `ui_disable_self` is defined.
            NOTE: If `ui_disable_self` is Undefined, the disable button will only disable this setting in the GUI.
        ui_disable_other : Any, optional
            The value which disables children of this setting.
            This value is used in validation if it is the smallest of all other values (e.g. default, min).

            Please ensure that the backend using this setting respects this value - otherwise it has no effect.
            ##### Applicable settings: All
        ui_disable_self : Any, optional
            The value which disables this setting.
            This value is used in validation if it is the smallest of all other values (e.g. default, min).

            Please ensure that the backend using this setting respects this value - otherwise it has no effect.
            In the GUI, a button for disabling this setting is provided.
            ##### Applicable settings: All
        ui_desc : str, optional
            The description of this setting in the GUI.
            ##### Applicable settings: All
        ui_file_filter : str, optional
            The files considered valid for selection, e.g., "XML Files (*.xml)".
            ##### Applicable settings: File Selectors
        ui_flags : UIFlags | list[UIFlags], optional
            Special flags that apply to this setting.
            ##### Applicable settings: All
        ui_group : Any | list[Any], optional
            Designate a group ID (GID) which all options with this GID belongs to.
            This makes various actions possible for settings, e.g., they can be visually grouped in the GUI.

            A setting in a ui_group can have the ui_group_parent option present, which makes this setting act as the parent of the group.
            ##### Applicable settings: All
        ui_group_parent : UIGroups | list[UIGroups], optional
            Designate the parent setting of a group.
            Only one setting in each group can be designated parent.
            If more than one exist, the first found is used.
            ##### Applicable settings: All
            NOTE: Full documentation is available at #LINK: src\applib\module\configuration\tools\template_options\template_docs.txt
        ui_invalid_msg : tuple[str, str], optional
            Message informing the user that they typed invalid data into this setting in the GUI.

            This argument is a tuple where:
            ```
                tuple[0] == "title"
                tuple[1] == "description"
            ```
            ##### Applicable settings: Any free-form input, e.g., a line edit.
        ui_title : str, optional
            The title of this setting in the GUI.
            ##### Applicable settings: All
        ui_type : UITypes, optional
            The widget type to use for this setting.
            ##### Applicable settings: All
        ui_unit : str, optional
            The unit associated with this setting.
            ##### Applicable settings: Slider (TODO: Ensure units can be used on all GUI elements)
            NOTE: Must be singular, i.e., "day".
        validators : Callable | list[Callable], optional
            Functions used to validate the value of this setting (in addition to default Pydantic validation).
            Each function must take one argument, which is the value of this setting.
            If the value is invalid, they must raise either ValueError or AssertionError.
        values : list | dict, optional
            Possible values for this setting.
            ##### Applicable settings: Combobox
        """
        super().__init__(
            default,
            actions,
            max,
            min,
            type,
            validators,
        )
        self.ui_disable_button = ui_disable_button
        self.ui_disable_other = ui_disable_other
        self.ui_disable_self = ui_disable_self
        self.ui_desc = ui_desc
        self.ui_file_filter = ui_file_filter
        self.ui_flags = ui_flags
        self.ui_group = ui_group
        self.ui_group_parent = ui_group_parent
        self.ui_invalid_msg = ui_invalid_msg
        self.ui_title = ui_title
        self.ui_type = ui_type
        self.ui_unit = ui_unit
        self.values = values
